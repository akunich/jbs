<?php
#-------------------------------------------------------------------------------
/** @author Великодный В.В. (Joonte Ltd.) */
#-------------------------------------------------------------------------------
class Registrator{
# Тип регистратора
public $TypeID = 'Default';
# Параметры связи с регистратором
public $Settings = Array();
#-------------------------------------------------------------------------------
public function Select($RedistratorID){
  /****************************************************************************/
  $__args_types = Array('integer');
  #-----------------------------------------------------------------------------
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  $Settings = DB_Select('Registrators','*',Array('UNIQ','ID'=>$RedistratorID));
  #-----------------------------------------------------------------------------
  switch(ValueOf($Settings)){
    case 'error':
      return ERROR | @Trigger_Error('[Registrator->Select]: не удалось выбрать регистратора');
    case 'exception':
      return new gException('REGISTRATOR_NOT_FOUND','Указаный регистратор не найден');
    case 'array':
      #-------------------------------------------------------------------------
      $this->TypeID = $Settings['TypeID'];
      #-------------------------------------------------------------------------
      $this->Settings = $Settings;
      #-------------------------------------------------------------------------
      if(Is_Error(System_Load(SPrintF('libs/%s.php',$this->Settings['TypeID']))))
        return ERROR | @Trigger_Error(500);
      #-------------------------------------------------------------------------
      return TRUE;
    default:
      return ERROR | @Trigger_Error(101);
  }
}
#-------------------------------------------------------------------------------
public function DomainRegister(){
  /****************************************************************************/
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  Array_UnShift($__args__,$this->Settings);
  #-----------------------------------------------------------------------------
  $Function = SPrintF('%s_Domain_Register',$this->TypeID);
  #-----------------------------------------------------------------------------
  if(!Function_Exists($Function))
    return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
  #-----------------------------------------------------------------------------
  $Result = Call_User_Func_Array($Function,$__args__);
  if(Is_Error($Result))
    return ERROR | @Trigger_Error('[Registrator->DomainRegister]: не удалось вызвать целевую функцию');
  #-----------------------------------------------------------------------------
  return $Result;
}
#-------------------------------------------------------------------------------
public function GetUploadID(){
  /****************************************************************************/
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  Array_UnShift($__args__,$this->Settings);
  #-----------------------------------------------------------------------------
  $Function = SPrintF('%s_GetUploadID',$this->TypeID);
  #-----------------------------------------------------------------------------
  if(!Function_Exists($Function))
    return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
  #-----------------------------------------------------------------------------
  $Result = Call_User_Func_Array($Function,$__args__);
  if(Is_Error($Result))
    return ERROR | @Trigger_Error('[Registrator->GetUploadID]: не удалось вызвать целевую функцию');
  #-----------------------------------------------------------------------------
  return $Result;
}
#-------------------------------------------------------------------------------
public function DomainProlong(){
  /****************************************************************************/
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  Array_UnShift($__args__,$this->Settings);
  #-----------------------------------------------------------------------------
  $Function = SPrintF('%s_Domain_Prolong',$this->TypeID);
  #-----------------------------------------------------------------------------
  if(!Function_Exists($Function))
    return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
  #-----------------------------------------------------------------------------
  $Result = Call_User_Func_Array($Function,$__args__);
  if(Is_Error($Result))
    return ERROR | @Trigger_Error('[Registrator->DomainProlong]: не удалось вызвать целевую функцию');
  #-----------------------------------------------------------------------------
  return $Result;
}
#-------------------------------------------------------------------------------
public function DomainNsChange(){
  /****************************************************************************/
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  Array_UnShift($__args__,$this->Settings);
  #-----------------------------------------------------------------------------
  $Function = SPrintF('%s_Domain_Ns_Change',$this->TypeID);
  #-----------------------------------------------------------------------------
  if(!Function_Exists($Function))
    return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
  #-----------------------------------------------------------------------------
  $Result = Call_User_Func_Array($Function,$__args__);
  if(Is_Error($Result))
    return ERROR | @Trigger_Error('[Registrator->DomainNsChange]: не удалось вызвать целевую функцию');
  #-----------------------------------------------------------------------------
  return $Result;
}
#-------------------------------------------------------------------------------
public function CheckTask(){
  /****************************************************************************/
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  Array_UnShift($__args__,$this->Settings);
  #-----------------------------------------------------------------------------
  $Function = SPrintF('%s_Check_Task',$this->TypeID);
  #-----------------------------------------------------------------------------
  if(!Function_Exists($Function))
    return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
  #-----------------------------------------------------------------------------
  $Result = Call_User_Func_Array($Function,$__args__);
  if(Is_Error($Result))
    return ERROR | @Trigger_Error('[Registrator->CheckTask]: не удалось вызвать целевую функцию');
  #-----------------------------------------------------------------------------
  return $Result;
}
#-------------------------------------------------------------------------------
public function ContractRegister(){
  /****************************************************************************/
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  Array_UnShift($__args__,$this->Settings);
  #-----------------------------------------------------------------------------
  $Function = SPrintF('%s_Contract_Register',$this->TypeID);
  #-----------------------------------------------------------------------------
  if(!Function_Exists($Function))
    return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
  #-----------------------------------------------------------------------------
  $Result = Call_User_Func_Array($Function,$__args__);
  if(Is_Error($Result))
    return ERROR | @Trigger_Error('[Registrator->ContractRegister]: не удалось вызвать целевую функцию');
  #-----------------------------------------------------------------------------
  return $Result;
}
#-------------------------------------------------------------------------------
public function GetContract(){
  /****************************************************************************/
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  Array_UnShift($__args__,$this->Settings);
  #-----------------------------------------------------------------------------
  $Function = SPrintF('%s_Get_Contract',$this->TypeID);
  #-----------------------------------------------------------------------------
  if(!Function_Exists($Function))
    return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
  #-----------------------------------------------------------------------------
  $Result = Call_User_Func_Array($Function,$__args__);
  if(Is_Error($Result))
    return ERROR | @Trigger_Error('[Registrator->GetContract]: не удалось вызвать целевую функцию');
  #-----------------------------------------------------------------------------
  return $Result;
}
#-------------------------------------------------------------------------------
public function GetBalance(){
	/****************************************************************************/
	$__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
	/****************************************************************************/
	Array_UnShift($__args__,$this->Settings);
	#-----------------------------------------------------------------------------
	$Function = SPrintF('%s_Get_Balance',$this->TypeID);
	#-----------------------------------------------------------------------------
	if(!Function_Exists($Function))
		return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
	#-----------------------------------------------------------------------------
	$Result = Call_User_Func_Array($Function,$__args__);
	if(Is_Error($Result))
		return ERROR | @Trigger_Error('[Registrator->GetBalance]: не удалось вызвать целевую функцию');
	#-----------------------------------------------------------------------------
	return $Result;
}
#-------------------------------------------------------------------------------
public function IsAvailableDomain(){
	/****************************************************************************/
	$__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
	/****************************************************************************/
	Array_UnShift($__args__,$this->Settings);
	#-----------------------------------------------------------------------------
	$Function = SPrintF('%s_Is_Available_Domain',$this->TypeID);
	#-----------------------------------------------------------------------------
	if(!Function_Exists($Function))
		return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
	#-----------------------------------------------------------------------------
	$Result = Call_User_Func_Array($Function,$__args__);
	if(Is_Error($Result))
		return ERROR | @Trigger_Error('[Registrator->IsAvailableDomain]: не удалось вызвать целевую функцию');
	#-----------------------------------------------------------------------------
	return $Result;
}

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
public function DomainTransfer(){
  /****************************************************************************/
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  Array_UnShift($__args__,$this->Settings);
  #-----------------------------------------------------------------------------
  $Function = SPrintF('%s_Domain_Transfer',$this->TypeID);
  #-----------------------------------------------------------------------------
  if(!Function_Exists($Function))
    return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
  #-----------------------------------------------------------------------------
  $Result = Call_User_Func_Array($Function,$__args__);
  if(Is_Error($Result))
    return ERROR | @Trigger_Error('[Registrator->DomainTransfer]: не удалось вызвать целевую функцию');
  #-----------------------------------------------------------------------------
  return $Result;
}

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
public function DomainsAccept(){
	/****************************************************************************/
	$__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
	/****************************************************************************/
	Array_UnShift($__args__,$this->Settings);
	#-----------------------------------------------------------------------------
	$Function = SPrintF('%s_Domains_Accept',$this->TypeID);
	#-----------------------------------------------------------------------------
	if(!Function_Exists($Function))
		return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
	#-----------------------------------------------------------------------------
	$Result = Call_User_Func_Array($Function,$__args__);
	if(Is_Error($Result))
		return ERROR | @Trigger_Error('[Registrator->DomainsAccept]: не удалось вызвать целевую функцию');
	#-----------------------------------------------------------------------------
	return $Result;
	#-------------------------------------------------------------------------------
}

#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
public function ChangeContactDetail(){
  /****************************************************************************/
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  Array_UnShift($__args__,$this->Settings);
  #-----------------------------------------------------------------------------
  $Function = SPrintF('%s_Change_Contact_Detail',$this->TypeID);
  #-----------------------------------------------------------------------------
  if(!Function_Exists($Function))
    return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
  #-----------------------------------------------------------------------------
  $Result = Call_User_Func_Array($Function,$__args__);
  if(Is_Error($Result))
    return ERROR | @Trigger_Error('[Registrator->ChangeContactDetail]: не удалось вызвать целевую функцию');
  #-----------------------------------------------------------------------------
  return $Result;
}
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
public function GetContactDetail(){
  /****************************************************************************/
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  Array_UnShift($__args__,$this->Settings);
  #-----------------------------------------------------------------------------
  $Function = SPrintF('%s_Get_Contact_Detail',$this->TypeID);
  #-----------------------------------------------------------------------------
  if(!Function_Exists($Function))
    return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
  #-----------------------------------------------------------------------------
  $Result = Call_User_Func_Array($Function,$__args__);
  if(Is_Error($Result))
    return ERROR | @Trigger_Error('[Registrator->GetContactDetail]: не удалось вызвать целевую функцию');
  #-----------------------------------------------------------------------------
  return $Result;
}
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
/* получение списка всех доменов на аккаунте */
public function GetListDomains(){
  /****************************************************************************/
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  Array_UnShift($__args__,$this->Settings);
  #-----------------------------------------------------------------------------
  $Function = SPrintF('%s_Get_List_Domains',$this->TypeID);
  #-----------------------------------------------------------------------------
  if(!Function_Exists($Function))
    return new gException('FUNCTION_NOT_SUPPORTED','Функция не поддерживается API модулем');
  #-----------------------------------------------------------------------------
  $Result = Call_User_Func_Array($Function,$__args__);
  if(Is_Error($Result))
    return ERROR | @Trigger_Error('[Registrator->GetListDomains]: не удалось вызвать целевую функцию');
  #-----------------------------------------------------------------------------
  return $Result;
}
#-------------------------------------------------------------------------------
}
#-------------------------------------------------------------------------------
?>
