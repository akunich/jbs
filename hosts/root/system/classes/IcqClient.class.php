<?php
#-------------------------------------------------------------------------------
/** @author Великодный В.В. (Joonte Ltd.) */
#-------------------------------------------------------------------------------
if(Is_Error(System_Load('libs/Bytes.php','libs/TVL.php','libs/SNAC.php','libs/FLAP.php','libs/HTTP.php')))
  return ERROR | @Trigger_Error(500);
#-------------------------------------------------------------------------------
class IcqClient{
#-------------------------------------------------------------------------------
# Ресурс соединения
private $Socket = NULL;
# Массив описаний ошибок
private $Errors = Array();
# Идентификатор ошибки
private $ErrorID = '';
#-------------------------------------------------------------------------------
function __construct(){
  #-----------------------------------------------------------------------------
  $Path = System_Element('config/IcqClientErrors.ini');
  if(Is_Error($Path))
    return ERROR | @Trigger_Error('[IcqClient->IcqClient]: не удалось найти файл ошибок');
  #-----------------------------------------------------------------------------
  $this->Errors = Parse_Ini_File($Path);
  if(!Is_Array($this->Errors))
    return ERROR | @Trigger_Error('[IcqClient->Connect]: не загрузить файл ошибок');
  #-----------------------------------------------------------------------------
  return TRUE;
}
#-------------------------------------------------------------------------------
public function Connect($Server = 'login.icq.com',$Port = 5190){
  /****************************************************************************/
  $__args_types = Array('string','integer');
  #-----------------------------------------------------------------------------
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  $this->Socket = @FsockOpen($Server,$Port);
  if(!$this->IsConnected())
    return ERROR | @Trigger_Error('[IcqClient->Connect]: не удалось соединиться с сервером');
  #-----------------------------------------------------------------------------
  $Answer = $this->ReadIn();
  #-----------------------------------------------------------------------------
  $FLAP = FLAP_Explode($Answer);
  if(HexDec(Bytes_Decode($FLAP['Data'])) != 1)
    return ERROR | @Trigger_Error('[IcqClient->Connect]: неверный первоначальный ответ от сервера');
  #-----------------------------------------------------------------------------
  Debug(SPrintF('[IcqClient->Connect]: соединение с (%s:%u) принято',$Server,$Port));
  #-----------------------------------------------------------------------------
  return TRUE;
}
#-------------------------------------------------------------------------------
public function GetError(){
  #-----------------------------------------------------------------------------
  $ErrorID = $this->ErrorID;
  #-----------------------------------------------------------------------------
  if(!IsSet($this->Errors[$ErrorID]))
    return SPrintF('Не известная ошибка (%s)',$ErrorID);
  #-----------------------------------------------------------------------------
  return $this->Errors[$ErrorID];
}
#-------------------------------------------------------------------------------
public function Close(){
  #-----------------------------------------------------------------------------
  if(!$this->IsConnected())
    return ERROR | @Trigger_Error('[IcqClient->Close]: нет соединения с сервером');
  #-----------------------------------------------------------------------------
  Debug('[IcqClient->Connect]: закрываем соединение');
  #-----------------------------------------------------------------------------
  if(!Fclose($this->Socket))
    return ERROR | @Trigger_Error('[IcqClient->Close]: не удалось закрыть соединение с сервером');
  #-----------------------------------------------------------------------------
  return TRUE;
}
#-------------------------------------------------------------------------------
public function IsConnected(){
  #-----------------------------------------------------------------------------
  if(!Is_Resource($this->Socket))
    return FALSE;
  #-----------------------------------------------------------------------------
  return TRUE;
}
#-------------------------------------------------------------------------------
public function Login($UIN,$Password){
  /****************************************************************************/
  $__args_types = Array('integer','string');
  #-----------------------------------------------------------------------------
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  if(!$this->IsConnected())
    return ERROR | @Trigger_Error('[IcqClient->Login]: нет соединения с сервером');
  #-----------------------------------------------------------------------------
  # Готовим пакет для отсылки серверу авторизации
  #-----------------------------------------------------------------------------
  $Password = $this->CryptPassword($Password);
  if(Is_Error($Password))
    return ERROR | @Trigger_Error('[IcqClient->Login]: не удалось зашифровать пароль');
  #-----------------------------------------------------------------------------
  $TVL = TVL_Create(
    Array(
      #-------------------------------------------------------------------------
       '1' => $UIN, # my uin
       '2' => $Password, # password
       '3' => 'Joonte', # client name
       'e' => 'ru',
       'f' => 'ru',
      '14' => Array(085,DWORD),
      '16' => Array(234,WORD),
      '11' => Array(000,WORD),
      '18' => Array(002,WORD),
      '19' => Array(001,WORD),
      '1a' => Array(001,WORD)
    )
  );
  #-----------------------------------------------------------------------------
  $Answer = $this->SendTo(FLAP_Create(01,Bytes_I2B(DWORD,01).$TVL));
  if(!Is_Array($Answer))
    return ERROR | @Trigger_Error('[IcqClient->Login]: неверный ответ от сервера');
  #-----------------------------------------------------------------------------
  $TVLs = TVL_Explode($Answer['Data']);
  #-----------------------------------------------------------------------------
  if(IsSet($TVLs['8'])){
    #---------------------------------------------------------------------------
    $this->ErrorID = (integer)Bytes_Decode($TVLs['8']);
    #---------------------------------------------------------------------------
    return FALSE;
  }
  #-----------------------------------------------------------------------------
  if(!IsSet($TVLs['5']))
    return ERROR | @Trigger_Error('[IcqClient->Login]: сервер авторизации не прислал адрес рабочего сервера');
  #-----------------------------------------------------------------------------
  $Server = Explode(':',$TVLs['5']);
  #-----------------------------------------------------------------------------
  # Закрываем соединение с сервером авторизации, соединяемся с рабочим сервером
  #-----------------------------------------------------------------------------
  $this->Close();
  #-----------------------------------------------------------------------------
  if(!$this->Connect(Current($Server),(integer)Next($Server)))
    return ERROR | @Trigger_Error('[IcqClient->Login]: не удалось соединиться с рабочим сервером');
  #-----------------------------------------------------------------------------
  # Посылаем рабочему серверу COOKIE
  #-----------------------------------------------------------------------------
  $TVL = TVL_Create(Array('6'=>$TVLs['6']));
  #-----------------------------------------------------------------------------
  # client sends (1)
  # 4 BYTE   00 00 00 01
  # TLV(6)   STRING   cookie
  #-----------------------------------------------------------------------------
  $Answer = $this->SendTo(FLAP_Create(01,Bytes_I2B(DWORD,01).$TVL));
  if(!Is_Array($Answer))
    return ERROR | @Trigger_Error('[IcqClient->Login]: неверный ответ от сервера');
  #-----------------------------------------------------------------------------
  # server sends    # Server is ready
  # SNAC 1,03
  # 24 BYTE  00 01 00 02 00 03 00 04 00 06 00 08 00 09 00 0A 00 0B 00 0C 00 13 00 15
  #-----------------------------------------------------------------------------
  $SNAC = SNAC_Explode($Answer['Data']);
  if($SNAC['FamilyID'] != 1 || $SNAC['SubTypeID'] != 3)
    return ERROR | @Trigger_Error('[IcqClient->Login]: неверный ответ от сервера');
  #-----------------------------------------------------------------------------
  # client sends    # hey, i'm an icq client, not aim
  # SNAC 1,17
  # 32 BYTE
  #-----------------------------------------------------------------------------
  $SNAC = SNAC_Create(01,17,Bytes_Encode('00 01 00 03 00 13 00 02 00 02 00 01 00 03 00 01 00 15 00 01 00 04 00 01 00 06 00 01 00 09 00 01 00 0A 00 01 00 0B 00 01'));
  #-----------------------------------------------------------------------------
  $Answer = $this->SendTo(FLAP_Create(02,$SNAC));
  if(!Is_Array($Answer))
    return ERROR | @Trigger_Error('[IcqClient->Login]: неверный ответ от сервера');
  #-----------------------------------------------------------------------------
  # server sends    # got it, ack to 1,17
  # SNAC 1,18
  # 48 BYTE
  #-----------------------------------------------------------------------------
  $SNAC = SNAC_Explode($Answer['Data']);
  if($SNAC['FamilyID'] != 1 || $SNAC['SubTypeID'] != 18)
    return ERROR | @Trigger_Error('[IcqClient->Login]: неверный ответ от сервера');
  #-----------------------------------------------------------------------------
  # client sends    # request rate
  # SNAC 1,06
  # empty
  #-----------------------------------------------------------------------------
  $Answer = $this->SendTo(FLAP_Create(02,SNAC_Create(01,06)));
  if(!Is_Array($Answer))
    return ERROR | @Trigger_Error('[IcqClient->Login]: неверный ответ от сервера');
  #-----------------------------------------------------------------------------
  # server sends     # response to 1,06
  # SNAC 1,07
  # 181 BYTE  unknown
  # WORD      # of known messagges (N)
  # N DWORD   known Messages, a known message is a words pair: FAMILY/SUBTYPE
  # 17 DWORD  unknown, they seems messagge IDs too
  #-----------------------------------------------------------------------------
  $SNAC = SNAC_Explode($Answer['Data']);
  if($SNAC['FamilyID'] != 1 || $SNAC['SubTypeID'] != 7)
    return ERROR | @Trigger_Error('[IcqClient->Login]: неверный ответ от сервера');
  #-----------------------------------------------------------------------------
  # client sends
  # SNAC 1,02
  # 64 BYTE
  #-----------------------------------------------------------------------------
  $this->SendTo(FLAP_Create(02,SNAC_Create(01,02,Bytes_Encode('00 01 00 03 01 10 02 8A 00 02 00 01 01 01 02 8A 00 03 00 01 01 10 02 8A 00 15 00 01 01 10 02 8A 00 04 00 01 01 10 02 8A 00 06 00 01 01 10 02 8A 00 09 00 01 01 10 02 8A 00 0A 00 01 01 10 02 8A'))),FALSE);
  if(!$Answer)
    return ERROR | @Trigger_Error('[IcqClient->Login]: неверный ответ от сервера');
  #-----------------------------------------------------------------------------
  return TRUE;
}
#-------------------------------------------------------------------------------
private function ReadIn(){
  #-----------------------------------------------------------------------------
  if(!$this->IsConnected())
    return ERROR | @Trigger_Error('[IcqClient->ReadIn]: нет соединения с сервером');
  #-----------------------------------------------------------------------------
  $ReadIn = @Fread($this->Socket,256*256);
  #-----------------------------------------------------------------------------
  $Bytes = Bytes_Decode((string)$ReadIn,' ');
  #-----------------------------------------------------------------------------
  Debug(SPrintF("[IcqClient->ReadIn]: читаем ответ:\n%s",$Bytes));
  #-----------------------------------------------------------------------------
  return $ReadIn;
}
#-------------------------------------------------------------------------------
private function SendTo($Reguest,$IsWait = TRUE){
  /****************************************************************************/
  $__args_types = Array('string,boolean');
  #-----------------------------------------------------------------------------
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  if(!$this->IsConnected())
    return ERROR | @Trigger_Error('[IcqClient->SendTo]: нет соединения с сервером');
  #-----------------------------------------------------------------------------
  $Bytes = Bytes_Decode($Reguest,' ');
  #-----------------------------------------------------------------------------
  Debug(SPrintF("[IcqClient->SendTo]: посылаем запрос:\n%s",$Bytes));
  #-----------------------------------------------------------------------------
  $Fwrite = @Fwrite($this->Socket,$Reguest);
  if(!$Fwrite)
    return ERROR | @Trigger_Error('[IcqClient->SendTo]: не удалось записать в сокет');
  #-----------------------------------------------------------------------------
  # added by lissyara, 2012-01-04 in 08:42:54 MSK, for JBS-130
  Stream_Set_TimeOut($this->Socket,120);
  #-----------------------------------------------------------------------------
  if(!$IsWait)
    return TRUE;
  #-----------------------------------------------------------------------------
  $Answer = $this->ReadIn();
  if($Answer)
    return FLAP_Explode($Answer);
  #-----------------------------------------------------------------------------
  return FALSE;
}
#-------------------------------------------------------------------------------
public function Message($UIN,$Message){
  /****************************************************************************/
  $__args_types = Array('integer','string');
  #-----------------------------------------------------------------------------
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  if(!$this->IsConnected())
    return ERROR | @Trigger_Error('[IcqClient->Message]: нет соединения с сервером');
  #-----------------------------------------------------------------------------
  $TVL1 = TVL_Create(Array('2'=>Bytes_Encode('05 01 00 01 01 01 01').
    Bytes_I2B(WORD,StrLen($Message) + 4).Bytes_Encode('00 00 00 00').$Message));
  #-----------------------------------------------------------------------------
  $TVL2 = TVL_Create(Array('6'=>''));
  #-----------------------------------------------------------------------------
  $SNAC = SNAC_Create(04,06,Bytes_Encode('53 DE 53 75 16 14 BB 50 00 01').
    Bytes_I2B(BUTE,StrLen($UIN)).$UIN.$TVL1.$TVL2);
  #-----------------------------------------------------------------------------
  $Answer = $this->SendTo(FLAP_Create(02,$SNAC));
  if(!Is_Array($Answer))
    return ERROR | @Trigger_Error('[IcqClient->Message]: неверный ответ от сервера');
  #-----------------------------------------------------------------------------
  return TRUE;
}
#-------------------------------------------------------------------------------
private function CryptPassword($Password){
  /****************************************************************************/
  $__args_types = Array('string');
  #-----------------------------------------------------------------------------
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  $Length = StrLen($Password);
  #-----------------------------------------------------------------------------
  if($Length > 8)
    return ERROR | @Trigger_Error('[IcqClient->Password]: пароль не может быть длиннее 8 символов');
  #-----------------------------------------------------------------------------
  $Template = Array(0xF3,0x26,0x81,0xC4,0x39,0x86,0xDB,0x92);
  #-----------------------------------------------------------------------------
  $Result = '';
  #-----------------------------------------------------------------------------
  for($i=0;$i<$Length;$i++)
    $Result .= Chr($Template[$i]^Ord($Password{$i}));
  #-----------------------------------------------------------------------------
  return $Result;
}
#-------------------------------------------------------------------------------
static function IsOnLine($UIN){
  /****************************************************************************/
  $__args_types = Array('integer');
  #-----------------------------------------------------------------------------
  $__args__ = Func_Get_Args(); Eval(FUNCTION_INIT);
  /****************************************************************************/
  $Result = HTTP_Send(
    '/online.gif',
    Array(
      'Address' => 'status.icq.com',
      'Host'    => 'status.icq.com'
    ),
    Array(
      'web' => $UIN,
      'img' => 5
    )
  );
  if(Is_Error($Result))
    return ERROR | @Trigger_Error('[IcqClient->IsOnLine]: не удалось осуществить HTTP запрос');
  #-----------------------------------------------------------------------------
  if(!Preg_Match('/\/[a-zA-Z0-9]+.gif/',$Result['Heads'],$Found))
    return ERROR | @Trigger_Error('[IcqClient->IsOnLine]: неверный ответ от сервера');
  #-----------------------------------------------------------------------------
  return ('/online1.gif' == Current($Found));
}
#-------------------------------------------------------------------------------
}
#-------------------------------------------------------------------------------
# ICQ test message
#-------------------------------------------------------------------------------
/*$IcqClient = new IcqClient();
if(Is_Error($IcqClient))
  return ERROR | Trigger_Error(500);
#-------------------------------------------------------------------------------
if(Is_Error($IcqClient->Connect()))
  return ERROR | Trigger_Error(500);
#-------------------------------------------------------------------------------
$IsLogin = $IcqClient->Login(811571,'Test');
if($IsLogin)
  return ERROR | Trigger_Error(500);
#-------------------------------------------------------------------------------
if(!$IsLogin)
  return ERROR | Trigger_Error($IcqClient->GetError());
#-------------------------------------------------------------------------------
$IsMessage = $IcqClient->Message('','');
if(Is_Error($IsMessage))
  return ERROR | Trigger_Error($IcqClient->GetError());*/
#-------------------------------------------------------------------------------
?>
